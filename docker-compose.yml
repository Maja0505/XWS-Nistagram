version: '3'
services:

  gateway:
    image: nginx:1.19.8-alpine
    ports:
      - 8080:8080
    networks:
      - network1
    volumes:
      - ./ApiGateway/nginx.conf:/etc/nginx/nginx.conf
      - ./ApiGateway/api_gateway.conf:/etc/nginx/api_gateway.conf
    restart: always

  user-service:
    image: user-service:compose_build
    build:
      context: ./UserService
      dockerfile: Dockerfile
    networks:
      - network1
    environment:
      USER_SERVICE_PORT: 8080
      USER_SERVICE_HOST: mongo
    restart: on-failure
    depends_on:
      - mongo
    links: 
      - mongo
    volumes:
      - micro_services:/app

  post-service:
    image: post-service:compose_build
    build:
      context: ./PostService
      dockerfile: Dockerfile
    networks:
      - network1
    environment:
      POST_SERVICE_PORT: 8080
      POST_SERVICE_HOST: cass
      USER_SERVICE_PORT: 8080
      USER_SERVICE_DOMAIN: user-service
      USER_FOLLOWERS_SERVICE_PORT: 8080
      USER_FOLLOWERS_SERVICE_DOMAIN: user-followers-service
    restart: on-failure
    volumes:
      - micro_services:/app
    depends_on:
      - cass
    links: 
      - cass

  user-followers-service:
    image: user-followers-service:compose_build
    build:
      context: ./UserFollowersService
      dockerfile: Dockerfile
    networks:
      - network1
    environment:
      USER_FOLLOWERS_SERVICE_PORT: 8080
      USER_FOLLOWERS_SERVICE_HOST: neo4j
      USER_SERVICE_PORT: 8080
      USER_SERVICE_DOMAIN: user-service
    restart: on-failure
    depends_on:
      - neo4j
    links: 
      - neo4j
    volumes:
      - micro_services:/app

  media-storage-service:
    image: media-storage-service:compose_build
    build:
      context: ./MediaStorageService
      dockerfile: Dockerfile
    networks:
      - network1
    environment:
      MEDIA_STORAGE_SERVICE_PORT: 8080
    restart: on-failure
    volumes:
      - micro_services:/app

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_db:/data/db
    networks:
      - network1

  neo4j:
    image: neo4j:4.0.3
    restart: unless-stopped
    hostname: neo4j
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - network1
    volumes:
      - neo4j_db:/plugins
      - neo4j_db:/conf
      - neo4j_db:/data
      - neo4j_db:/import
      - neo4j_db:/logsneo4j
    environment:
      - NEO4J_AUTH=neo4j/nistagram
      - NEO4J_dbms_connector_bolt_advertised__address=neo4j:7687

  cass:
    image: cassandra:3.11.8
    container_name: cass
    hostname: cass
    healthcheck:
        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
        interval: 5s
        timeout: 5s
        retries: 60
    networks:
      - network1
    ports:
      - "9042:9042"
    volumes:
      - cass_db:/etc/cassandra/cass.yaml

volumes:
    cass_db:
    neo4j_db:
    mongo_db:
    micro_services:

networks:
   network1:
     name: nistagram
     driver: bridge